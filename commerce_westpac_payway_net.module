<?php

/**
 * @file
 * Provides a Payway Net payment method for Drupal Commerce
 *
 */

/**
 * Implements hook_menu().
 */
function commerce_westpac_payway_net_menu() {
  $items['checkout/payway_net_notify'] = array(
    'title' => t('Callback handler'),
    'page callback' => 'commerce_westpac_payway_net_notify_handler',
    'callback arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
}

function commerce_westpac_payway_net_form_alter($form) {
  error_log($form['#form_id']);
  //dpm($form_id, 'form id');
}

/**
 * MODULE INFO
 * Implements hook_commerce_payment_method_info().
 */
function commerce_westpac_payway_net_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_westpac_payway_net'] = array(
    'title' => t('Pay by credit card via Westpac PayWay Net'),
    'short_title' => t('Pay by credit card via Westpac PayWay Net'),
    'display_title' => t('Pay by credit card via Westpac PayWay Net'),
    'description' => t('Pay by credit card via Westpac PayWay Net'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    //'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * MODULE SETTINGS
 * Payment method callback: settings form.
 */
function commerce_westpac_payway_net_settings_form($settings = NULL) {
  $form = array();
  $settings = (array)$settings + array(
  'commerce_westpac_payway_net_encryptionKey' => '',
  'commerce_westpac_payway_net_billerCode' => '',
  'commerce_westpac_payway_net_username' => '',
  'commerce_westpac_payway_net_password' => '',
  'commerce_westpac_payway_net_caCertsFile' => '',
  'commerce_westpac_payway_net_merchantId' => 'TEST',
  'commerce_westpac_payway_net_paypalEmail' => 'test@example.com',
  'commerce_westpac_payway_net_payWayBaseUrl' => 'https://www.payway.com.au/',
  );
  $form['commerce_westpac_payway_net_encryptionKey'] = array(
    '#type' => 'textfield',
    '#title' => t('Encryption Key'),
    '#size' => 80,
    '#description' => t('eg. 123456789'),
    '#default_value' => $settings['commerce_westpac_payway_net_encryptionKey'],
    '#required' => TRUE,
  );
  $form['commerce_westpac_payway_net_billerCode'] = array(
    '#type' => 'textfield',
    '#title' => t('Biller Code'),
    '#size' => 80,
    '#description' => t('eg. 123456'),
    '#default_value' => $settings['commerce_westpac_payway_net_billerCode'],
    '#required' => TRUE,
  );
  $form['commerce_westpac_payway_net_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 80,
    '#description' => t('eg. K12345'),
    '#default_value' => $settings['commerce_westpac_payway_net_username'],
    '#required' => TRUE,
  );
  $form['commerce_westpac_payway_net_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#size' => 80,
    '#description' => t('eg. abcdefghijk'),
    '#default_value' => $settings['commerce_westpac_payway_net_password'],
    '#required' => TRUE,
  );
  $form['commerce_westpac_payway_net_caCertsFile'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to cacerts.crt file'),
    '#size' => 80,
    '#description' => t('eg. /home/username/dev/certs/cacerts.crt'),
    '#default_value' => $settings['commerce_westpac_payway_net_caCertsFile'],
    '#required' => TRUE,
  );
  $form['commerce_westpac_payway_net_merchantId'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Id'),
    '#size' => 80,
    '#description' => t('eg. TEST'),
    '#default_value' => $settings['commerce_westpac_payway_net_merchantId'],
    '#required' => TRUE,
  );
  $form['commerce_westpac_payway_net_paypalEmail'] = array(
    '#type' => 'textfield',
    '#title' => t('Return link text'),
    '#size' => 80,
    '#description' => t('eg. test@example.com'),
    '#default_value' => $settings['commerce_westpac_payway_net_paypalEmail'],
    '#required' => TRUE,
  );
  $form['commerce_westpac_payway_net_payWayBaseUrl'] = array(
    '#type' => 'textfield',
    '#title' => t('Return link text'),
    '#size' => 80,
    '#description' => t('eg. https://www.payway.com.au/'),
    '#default_value' => $settings['commerce_westpac_payway_net_payWayBaseUrl'],
    '#required' => TRUE,
  );
// dpm($form);
  return $form;
}

/**
 * EXTRA FORM SHOWN TO CUSTOMER WHEN THEY CHOOSE WESTPAC PAYWAY NET PAYMENT METHOD
 * Payment method callback: submit form.
 */
function commerce_westpac_payway_net_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  // Merge in values from the order.
  if (!empty($order->data['commerce_westpac_payway_net'])) {
    $pane_values += $order->data['commerce_westpac_payway_net'];
  }
  return $form;
}

/**
 * VALIDATION OF FORM SHOWN TO CUSTOMER WHEN THEY CHOOSE THIS PAYMENT METHOD
 * Payment method callback: submit form validation.
 */
function commerce_westpac_payway_net_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  dpm('generating token');
}

/**
 * CALLBACK FOR FORM SHOWN TO CUSTOMER WHEN THEY CHOOSE THIS PAYMENT METHOD -> SENDS TO COMMERCE TRANSACTION
 * Payment method callback: submit form submission.
 */
function commerce_westpac_payway_net_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  dpm('token generated');

  $order->data['commerce_westpac_payway_net'] = $pane_values;
  commerce_westpac_payway_net_transaction($payment_method, $order, $charge, $pane_values['name']);
}

/**
 * THIS FORM GETS SUBMITTED TO WESTPAC HOSTED PAYMENT PAGE
 * Payment method callback: redirect form to nab hosted payments page gateway.
 */
function commerce_westpac_payway_net_redirect_form($form, &$form_state, $order, $payment_method) {
  module_load_include('inc', 'commerce_westpac_payway_net');
  $return_link_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(), array('absolute' => TRUE));
  // Commerce has price in cents, Payway wants dollars
  $payment_amount = $order->commerce_order_total['und'][0]['amount'] / 100;
  $return_link_url = url($return_link_url, array('absolute' => TRUE));
  $payway_base_url = $payment_method['settings']['commerce_westpac_payway_net_payWayBaseUrl'];
  $biller_code = $payment_method['settings']['commerce_westpac_payway_net_billerCode'];

  $token_variables = array(
    'payway_url'        => $payway_base_url,
    'payment_reference' => $order->order_id,
    'payment_amount'    => $payment_amount,
    'return_link_url'   => $return_link_url,
    'biller_code'       => $biller_code,
    'username'          => $payment_method['settings']['commerce_westpac_payway_net_username'],
    'password'          => $payment_method['settings']['commerce_westpac_payway_net_password'],
    'merchant_id'       => $payment_method['settings']['commerce_westpac_payway_net_merchantId'],
    'paypal_email'      => $payment_method['settings']['commerce_westpac_payway_net_paypalEmail'],
    'cert_path'         => $payment_method['settings']['commerce_westpac_payway_net_caCertsFile'],
  );
  //dpm($payment_method, 'payment method');
  //dpm($pane_values, 'pane values');
  //dpm($checkout_pane, 'checkout pane');
  //dpm($order, 'order');
  try {
    $token = _commerce_westpac_payway_net_get_token($token_variables);
    $url = $payway_base_url .
      'MakePayment?biller_code=' . $biller_code .
      '&token=' . $token;
    drupal_goto($url);
  }
  catch (Exception $e) {
    form_set_error('Unable to communicate with PayWay Net payment gateway.');
  }
  return $form;
}

/**
 * VALIDATES THE FORM SUBMITTED TO WESTPAC
 * Payment validate: this service doesn't provide any redirect for error or fail transactions
 * The module does nothing with these at this point. The will stay at checkout order state.
 */
function commerce_westpac_payway_net_redirect_form_validate($order, $payment_method) {
  dpm(__LINE__, __FUNCTION__);
  module_load_include('inc', 'commerce_westpac_payway_net');
  $return_link_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(), array('absolute' => TRUE));
/*
  // Throw an error if a long enough name was not provided.
  if (strlen($pane_values['phone']) < 6) {
    form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a phone number 6 or more characters long.'));
    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    return FALSE;
  }
*/

  // dpm(debug_backtrace());
  commerce_nab_hosted_payment_callback_handler();
  commerce_nab_hosted_payment_status_update($order);
  commerce_nab_hosted_payment_transaction($payment_method, $order, COMMERCE_PAYMENT_STATUS_SUCCESS);
  commerce_payment_redirect_pane_next_page($order);
  return TRUE;
}

function commerce_westpac_payway_net_redirect_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  dpm(__LINE__, __FUNCTION__);

}

/**
 * Creates a payway payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_westpac_payway_net_transaction($payment_method, $order, $charge, $name) {
  dpm(__LINE__, __FUNCTION__);
  $transaction = commerce_payment_transaction_new('commerce_westpac_payway_net', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Name: @name';
  $transaction->message_variables = array('@name' => $name);
  commerce_payment_transaction_save($transaction);
}

/**
 * Notify handler.
 *
 * Receives POST from PayWay Net with transaction details (encrypted).
 */
function commerce_westpac_payway_net_notify_handler() {
  error_log(__FUNCTION__);
  error_log('POST: '.print_r($_POST,1));
  error_log('REQUEST: '.print_r($_REQUEST,1));
  error_log('ARGS: '.print_r(func_get_args(),1));
  parse_str($_SERVER['QUERY_STRING'], $data);

  // ensure we have a payment reference
  if (empty($_POST['payment_reference'])) {
    // no payment reference supplied,
    // return access denied & log error
  
  }
  // ensure we have a transaction
  if (!$trans = commerce_payment_transaction_load($_POST['payment_reference'])) {
    // no transaction found for supplied reference
    // return access denied & log error
    
  }
  // authenticate request from payway net
  // (we need transaction->payment_method[details] to match)
  error_log('TRANS: '.print_r($trans,1));
  watchdog('commerce_payway_net', 'Transaction:<pre>!trans</pre>', array('!trans' => print_r($trans,1)), WATCHDOG_DEBUG);
  watchdog('payway_net', 'Transaction:<pre>!trans</pre>', array('!trans' => print_r($trans,1)), WATCHDOG_DEBUG);

  $query_data = array(
    'commerce_westpac_payway_net_ret_bank_ref' => $data['bank_reference'],
    'commerce_westpac_payway_net_ret_bank_amt' => round($data['payment_amount']*100, 0),
    'commerce_westpac_payway_net_ret_bank_num' => $data['payment_number'],
  );
  $post = print_r($_POST,1);  
  watchdog('commerce_payway_net', 'Notification: <pre>!dbg</pre>', array('!dbg' => $post), WATCHDOG_DEBUG);
  error_log(print_r($_POST,1));

  global $user;
  $workstring = 'cmd=_notify-validate';
  $i = 1;
  // @TODO: This foreach() does ... nothing at all?
  foreach ($_POST as $key => $value) {
    if (get_magic_quotes_gpc()) {
      // Fix issue with magic quotes.
      $value = stripslashes($value);
    }

    // @TODO eregi() is deprecated in PHP5, replace.
    if (!eregi("^[_0-9a-z-]{1,30}$", $key) || !strcasecmp($key, 'cmd')) {
      unset($key);
      unset($value);
    }
  }

  $param_string = "";
  foreach ($_POST as $name => $value) {
    $params[$name] = $value;
    if ($name != "username" && $name != "password") {
      $param_string .= "$name=$value;";
    }
  }
  foreach ($_GET as $name => $value) {
    $params[$name] = $value;
    if ($name != "username" && $name != "password") {
      $param_string .= "$name=$value;";
    }
  }

  // Verify this is coming from PayWay Net
  // @TODO Need to get user/pass from Commerce payment method
  // (not a variable - Commerce supports multiple instances,
  // so we need to get from the order)
  if ($params['username'] != variable_get('uc_payway_net_security_username', '')
       || $params['password'] != variable_get('uc_payway_net_security_password', '')) {
    // Usually this means you haven't configured your
    // security username and security password correctly in
    // Ubercart PayWay Net module configuration.
    //
    // If your settings are exactly right, someone's trying
    // to send a fraudulent payment notification.
    watchdog('commerce_westpac_payway_net', 'Denied access to PayWay Net notification endpoint.', array(), WATCHDOG_ERROR);
    drupal_access_denied();
  }
  else {
    // Unsure why PayWay Net returns the amount with a thousands separator,
    // but there you have it.
    $params['am_payment'] = str_replace(',', '', $params['am_payment']);
    watchdog('commerce_westpac_payway_net', 'Params: <pre>!params</pre>', array('!params' => print_r($params,1)), WATCHDOG_DEBUG);
    $order_id = trim($params['payment_reference']);
    if ($order = uc_order_load($order_id)) {
      watchdog('commerce_westpac_payway_net', 'Order (notify): <pre>!order</pre>', array('!order' => print_r($order,1)), WATCHDOG_DEBUG);
      if ($params['fl_success'] == '1') {
        $comment = t('Payway Net payment_reference: @payment_reference', array('@payment_reference' => $params['payment_reference']));
        $targs = array(
          '@amount' => $params['am_payment'],
          '@order_id' => $order_id,
          '!order_link' => l('order #' . $order_id, 'admin/store/orders/' . $order_id),
        );
        watchdog('uc_payway_net', 'Payment of $@amount reported by PayWay Net for !order_link', $targs, WATCHDOG_INFO);
        //uc_order_comment_save($order_id, $user->uid, t('Payment of @amount submitted via PayWay Net.', $targs), 'admin', 'payment_received  ');
        //uc_order_comment_save($order_id, $user->uid, t('PayWay Net reported a payment of @amount.', $targs), 'order', 'payment_received');
        //uc_payment_enter($order_id, 'payway_net', $params['am_payment'], $order->uid, array(), $comment);
        //uc_cart_complete_sale($order);
      }
      else {
        watchdog('commerce_westpac_payway_net', 'Payment failure reported by PayWay Net for order @order_id', array('@order_id' => $order_id), WATCHDOG_ERROR);
        //uc_order_comment_save($order_id, $user->uid, t("Attempted payment failed for order @payment_reference.", array('@payment_reference' => $order_id)), 'order');
      }
      // Tell PayWay that everything's fine.
      return "Success";
    }
    else {
      // If error results, return HTTP 500.
      watchdog('commerce_westpac_payway_net', 'Received notification from PayWay Net, but unable to load order with ID %oid.', array('!oid' => $params['payment_reference']), WATCHDOG_ERROR);
      drupal_add_http_header('Status', '503 Unable to locate order for update');
      die("Error: Unable to locate order for update.");
    }
  }

  return $query_data;
}

/**
 * ORDER STATE
 * Implements hook_commerce_order_state_info().
 */
function commerce_westpac_payway_net_commerce_order_state_info() {
  $order_states = array();
  $order_states['finance'] = array(
    'name' => 'finance',
    'title' => t('Finance'),
    'description' => t('Orders in this state have been through checkout and need the payment verified by finance'),
    'weight' => 0,
    'default_status' => 'req_fin_confirm',
  );
  return $order_states;
}

/**
 * ORDER STATUS
 * Implements hook_commerce_order_status_info().
 */
function commerce_westpac_payway_net_commerce_order_status_info() {
  $order_statuses = array();
  $order_statuses['req_fin_confirm'] = array(
    'name' => 'req_fin_confirm',
    'title' => t('Requires Finance Confimation'),
    'state' => 'finance',
  );
  $order_statuses['has_fin_confirm'] = array(
    'name' => 'has_fin_confirm',
    'title' => t('Payment Confirmed By Finance'),
    'state' => 'finance',
  );
  return $order_statuses;
}

/**
 * ORDER STATUS
 * updates the order status
 */
function commerce_westpac_payway_net_status_update($order) {
  // Load the order status object for the current order.
  $order_status = commerce_order_status_load($order->status);
  // dpm($order_status);
  if ($order_status['state'] == 'checkout' ) {
    $order = commerce_order_status_update($order, 'req_fin_confirm');
  }
}
